{"ast":null,"code":"import { loadPageChunk } from './getPageData';\nimport { values } from './rpc';\nconst nonPreviewTypes = new Set(['editor', 'page', 'collection_view']);\nexport async function getPostPreview(pageId) {\n  let blocks;\n  let dividerIndex = 0;\n  const data = await loadPageChunk({\n    pageId,\n    limit: 10\n  });\n  blocks = values(data.recordMap.block);\n\n  for (let i = 0; i < blocks.length; i++) {\n    if (blocks[i].value.type === 'divider') {\n      dividerIndex = i;\n      break;\n    }\n  }\n\n  blocks = blocks.splice(0, dividerIndex).filter(({\n    value: {\n      type,\n      properties\n    }\n  }) => !nonPreviewTypes.has(type) && properties).map(block => block.value.properties.title);\n  return blocks;\n}","map":{"version":3,"sources":["/Users/jamesbedford/Documents/GitHub/jamees-site/src/lib/notion/getPostPreview.ts"],"names":["loadPageChunk","values","nonPreviewTypes","Set","getPostPreview","pageId","blocks","dividerIndex","data","limit","recordMap","block","i","length","value","type","splice","filter","properties","has","map","title"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,MAAT,QAAuB,OAAvB;AAEA,MAAMC,eAAe,GAAG,IAAIC,GAAJ,CAAQ,CAAC,QAAD,EAAW,MAAX,EAAmB,iBAAnB,CAAR,CAAxB;AAEA,OAAO,eAAeC,cAAf,CAA8BC,MAA9B,EAA8C;AACnD,MAAIC,MAAJ;AACA,MAAIC,YAAY,GAAG,CAAnB;AAEA,QAAMC,IAAI,GAAG,MAAMR,aAAa,CAAC;AAAEK,IAAAA,MAAF;AAAUI,IAAAA,KAAK,EAAE;AAAjB,GAAD,CAAhC;AACAH,EAAAA,MAAM,GAAGL,MAAM,CAACO,IAAI,CAACE,SAAL,CAAeC,KAAhB,CAAf;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAIN,MAAM,CAACM,CAAD,CAAN,CAAUE,KAAV,CAAgBC,IAAhB,KAAyB,SAA7B,EAAwC;AACtCR,MAAAA,YAAY,GAAGK,CAAf;AACA;AACD;AACF;;AAEDN,EAAAA,MAAM,GAAGA,MAAM,CACZU,MADM,CACC,CADD,EACIT,YADJ,EAENU,MAFM,CAGL,CAAC;AAAEH,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAF;AAAQG,MAAAA;AAAR;AAAT,GAAD,KACE,CAAChB,eAAe,CAACiB,GAAhB,CAAoBJ,IAApB,CAAD,IAA8BG,UAJ3B,EAMNE,GANM,CAMDT,KAAD,IAAgBA,KAAK,CAACG,KAAN,CAAYI,UAAZ,CAAuBG,KANrC,CAAT;AAQA,SAAOf,MAAP;AACD","sourcesContent":["import { loadPageChunk } from './getPageData'\nimport { values } from './rpc'\n\nconst nonPreviewTypes = new Set(['editor', 'page', 'collection_view'])\n\nexport async function getPostPreview(pageId: string) {\n  let blocks\n  let dividerIndex = 0\n\n  const data = await loadPageChunk({ pageId, limit: 10 })\n  blocks = values(data.recordMap.block)\n\n  for (let i = 0; i < blocks.length; i++) {\n    if (blocks[i].value.type === 'divider') {\n      dividerIndex = i\n      break\n    }\n  }\n\n  blocks = blocks\n    .splice(0, dividerIndex)\n    .filter(\n      ({ value: { type, properties } }: any) =>\n        !nonPreviewTypes.has(type) && properties\n    )\n    .map((block: any) => block.value.properties.title)\n\n  return blocks\n}\n"]},"metadata":{},"sourceType":"module"}