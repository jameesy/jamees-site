{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/jamesbedford/Documents/GitHub/jamees-site/src/components/content.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ReactJSXParser from '@zeit/react-jsx-parser';\nimport Heading from './heading';\nimport components from './dynamic';\nimport { textBlock } from '../lib/notion/renderers';\nvar listTypes = new Set(['bulleted_list', 'numbered_list']);\nexport default function Content(_ref) {\n  var _this = this;\n\n  var blocks = _ref.blocks;\n  var listTagName = null;\n  var listLastId = null;\n  var listChildren = [];\n  return __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }\n  }, blocks.map(function (block, blockIdx) {\n    var value = block.value;\n    var type = value.type,\n        properties = value.properties,\n        id = value.id;\n    var isLast = blockIdx === blocks.length - 1;\n    var isList = listTypes.has(type);\n    var toRender = [];\n\n    if (isList) {\n      listTagName = components[type === 'bulleted_list' ? 'ul' : 'ol'];\n      listLastId = \"list\".concat(id);\n      listChildren.push(React.createElement(components.li || 'li', {\n        key: id\n      }, textBlock(properties.title, true, id)));\n    }\n\n    if (listTagName && (isLast || !isList)) {\n      toRender.push(React.createElement.apply(React, [listTagName, {\n        key: listLastId\n      }].concat(_toConsumableArray(listChildren))));\n      listChildren = [];\n      listLastId = null;\n      listTagName = null;\n    }\n\n    var renderHeading = function renderHeading(Type) {\n      toRender.push(__jsx(Heading, {\n        key: id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, __jsx(Type, {\n        key: id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, textBlock(properties.title, true, id))));\n    };\n\n    switch (type) {\n      case 'page':\n      case 'divider':\n        toRender.push(__jsx(\"hr\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }\n        }));\n        break;\n\n      case 'text':\n        if (properties) {\n          toRender.push(textBlock(properties.title, false, id));\n        }\n\n        break;\n\n      case 'image':\n      case 'video':\n        {\n          var _value$format = value.format,\n              format = _value$format === void 0 ? {} : _value$format,\n              caption = value.properties.caption;\n          var isImage = type === 'image';\n          var Comp = isImage ? 'img' : 'video';\n          toRender.push(__jsx(\"div\", {\n            className: \"media-container\",\n            key: id,\n            style: {\n              paddingBottom: format.block_aspect_ratio * 100 + '%'\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 13\n            }\n          }, __jsx(Comp, {\n            src: \"/api/asset?assetUrl=\".concat(encodeURIComponent(format.display_source), \"&blockId=\").concat(id),\n            controls: !isImage,\n            alt: caption ? caption.join('') : undefined,\n            loop: !isImage,\n            muted: !isImage,\n            autoPlay: !isImage,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }\n          })));\n          break;\n        }\n\n      case 'header':\n        renderHeading('h1');\n        break;\n\n      case 'sub_header':\n        renderHeading('h2');\n        break;\n\n      case 'sub_sub_header':\n        renderHeading('h3');\n        break;\n\n      case 'code':\n        {\n          if (properties.title) {\n            var content = properties.title[0][0];\n            var language = properties.language[0][0];\n\n            if (language === 'LiveScript') {\n              // this requires the DOM for now\n              toRender.push(__jsx(ReactJSXParser, {\n                key: id,\n                jsx: content,\n                components: components,\n                componentsOnly: false,\n                renderInpost: false,\n                allowUnknownElements: true,\n                blacklistedTags: ['script', 'style'],\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 17\n                }\n              }));\n            } else {\n              toRender.push(__jsx(components.Code, {\n                key: id,\n                language: language || '',\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 17\n                }\n              }, content));\n            }\n          }\n\n          break;\n        }\n\n      case 'quote':\n        if (properties.title) {\n          toRender.push(React.createElement(components.blockquote, {\n            key: id\n          }, textBlock(properties.title, false, id)));\n        }\n\n        break;\n\n      default:\n        if (true && !listTypes.has(type)) {\n          console.log('unknown type', type);\n        }\n\n        break;\n    }\n\n    return toRender;\n  }));\n}\n_c = Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/jamesbedford/Documents/GitHub/jamees-site/src/components/content.tsx"],"names":["React","ReactJSXParser","Heading","components","textBlock","listTypes","Set","Content","blocks","listTagName","listLastId","listChildren","map","block","blockIdx","value","type","properties","id","isLast","length","isList","has","toRender","push","createElement","li","key","title","renderHeading","Type","format","caption","isImage","Comp","paddingBottom","block_aspect_ratio","encodeURIComponent","display_source","join","undefined","content","language","blockquote","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactJSXParser from '@zeit/react-jsx-parser'\n\nimport Heading from './heading'\nimport components from './dynamic'\n\nimport { textBlock } from '../lib/notion/renderers'\n\nconst listTypes = new Set(['bulleted_list', 'numbered_list'])\n\nexport default function Content({ blocks }) {\n  let listTagName: string | null = null\n  let listLastId: string | null = null\n  let listChildren: React.ReactElement[] = []\n\n  return <div className=\"content\">\n    {blocks.map((block, blockIdx) => {\n      const { value } = block\n      const { type, properties, id } = value\n      const isLast = blockIdx === blocks.length - 1\n      const isList = listTypes.has(type)\n      let toRender = []\n\n      if (isList) {\n        listTagName = components[type === 'bulleted_list' ? 'ul' : 'ol']\n        listLastId = `list${id}`\n        listChildren.push(\n          React.createElement(\n            components.li || 'li',\n            { key: id } as any,\n            textBlock(properties.title, true, id)\n          )\n        )\n      }\n\n      if (listTagName && (isLast || !isList)) {\n        toRender.push(\n          React.createElement(\n            listTagName,\n            { key: listLastId! },\n            ...listChildren\n          )\n        )\n        listChildren = []\n        listLastId = null\n        listTagName = null\n      }\n\n      const renderHeading = (Type: string | React.ComponentType) => {\n        toRender.push(\n          <Heading key={id}>\n            <Type key={id}>{textBlock(properties.title, true, id)}</Type>\n          </Heading>\n        )\n      }\n\n      switch (type) {\n        case 'page':\n        case 'divider':\n          toRender.push(<hr />)\n          break\n        case 'text':\n          if (properties) {\n            toRender.push(textBlock(properties.title, false, id))\n          }\n          break\n        case 'image':\n        case 'video': {\n          const { format = {}, properties: { caption } } = value\n          \n          const isImage = type === 'image'\n          const Comp = isImage ? 'img' : 'video'\n\n          toRender.push(\n            <div className=\"media-container\" key={id} style={{ paddingBottom: (format.block_aspect_ratio * 100) + '%' }}>\n              <Comp\n                src={`/api/asset?assetUrl=${encodeURIComponent(\n                  format.display_source as any\n                )}&blockId=${id}`}\n                controls={!isImage}\n                alt={caption ? caption.join('') : undefined}\n                loop={!isImage}\n                muted={!isImage}\n                autoPlay={!isImage}\n              />\n            </div>\n          )\n          break\n        }\n        case 'header':\n          renderHeading('h1')\n          break\n        case 'sub_header':\n          renderHeading('h2')\n          break\n        case 'sub_sub_header':\n          renderHeading('h3')\n          break\n        case 'code': {\n          if (properties.title) {\n            const content = properties.title[0][0]\n            const language = properties.language[0][0]\n\n            if (language === 'LiveScript') {\n              // this requires the DOM for now\n              toRender.push(\n                <ReactJSXParser\n                  key={id}\n                  jsx={content}\n                  components={components}\n                  componentsOnly={false}\n                  renderInpost={false}\n                  allowUnknownElements={true}\n                  blacklistedTags={['script', 'style']}\n                />\n              )\n            } else {\n              toRender.push(\n                <components.Code key={id} language={language || ''}>\n                  {content}\n                </components.Code>\n              )\n            }\n          }\n          break\n        }\n        case 'quote':\n          if (properties.title) {\n            toRender.push(\n              React.createElement(\n                components.blockquote,\n                { key: id },\n                textBlock(properties.title, false, id)\n              )\n            )\n          }\n          break\n        default:\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            !listTypes.has(type)\n          ) {\n            console.log('unknown type', type)\n          }\n          break\n      }\n      return toRender\n    })}\n  </div>\n}"]},"metadata":{},"sourceType":"module"}