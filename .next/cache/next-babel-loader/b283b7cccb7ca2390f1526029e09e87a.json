{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport Header from '../../components/header';\nimport Content from '../../components/content';\nimport getPageData from '../../lib/notion/getPageData';\nimport getBlogIndex from '../../lib/notion/getBlogIndex';\nimport { getBlogLink, getDateStr } from '../../lib/blog-helpers'; // Get the data for each blog post\n\nexport async function getStaticProps({\n  params: {\n    slug\n  }\n}) {\n  // load the postsTable so that we can get the page's ID\n  const postsTable = await getBlogIndex();\n  const post = postsTable[slug];\n\n  if (!post) {\n    console.log(`Failed to find post for slug: ${slug}`);\n    return {\n      props: {\n        redirect: '/blog'\n      }\n    };\n  }\n\n  const postData = await getPageData(post.id);\n  post.content = postData.blocks;\n  post.Authors = ['Shu Ding']; // const { users } = await getNotionUsers(post.Authors || [])\n  // post.Authors = Object.keys(users).map(id => users[id].full_name)\n\n  return {\n    props: {\n      post\n    }\n  };\n} // Return our list of blog posts to prerender\n\nexport async function getStaticPaths() {\n  const postsTable = await getBlogIndex();\n  return {\n    paths: Object.keys(postsTable).filter(post => postsTable[post].Published === 'Yes').map(slug => getBlogLink(slug)),\n    fallback: true\n  };\n}\n\nconst RenderPost = ({\n  post,\n  redirect\n}) => {\n  if (redirect) {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n      name: \"robots\",\n      content: \"noindex\"\n    }), __jsx(\"meta\", {\n      httpEquiv: \"refresh\",\n      content: `0;url=${redirect}`\n    })));\n  }\n\n  if (!post) return __jsx(\"h1\", null, \"Oops.\");\n  return __jsx(React.Fragment, null, __jsx(\"article\", null, __jsx(\"h1\", null, post.Page || ''), __jsx(Header, {\n    title: post.Page\n  }, __jsx(\"div\", {\n    className: \"meta\"\n  }, post.Authors.join(' '), \", \", getDateStr(post.Date))), __jsx(Content, {\n    blocks: post.content || []\n  })));\n};\n\nexport default RenderPost;","map":null,"metadata":{},"sourceType":"module"}