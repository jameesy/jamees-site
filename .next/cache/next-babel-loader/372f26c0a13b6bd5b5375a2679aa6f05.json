{"ast":null,"code":"import React from 'react';\nimport components from '../../components/dynamic';\n\nfunction applyTags(tags = [], children, noPTag = false, key) {\n  let child = children;\n\n  for (const tag of tags) {\n    const props = {\n      key\n    };\n    let tagName = tag[0];\n    if (noPTag && tagName === 'p') tagName = React.Fragment;\n    if (tagName === 'c') tagName = 'code';\n\n    if (tagName === 'a') {\n      props.href = tag[1];\n    }\n\n    child = React.createElement(components[tagName] || tagName, props, child);\n  }\n\n  return child;\n}\n\nconst CJKTester = /[\\u3000-\\u303f\\u3040-\\u309f\\u30a0-\\u30ff\\uff00-\\uff9f\\u4e00-\\u9faf\\u3400-\\u4dbf]/g;\nexport function textBlock(text = [], noPTag = false, mainKey) {\n  var _text$toString$match;\n\n  const children = [];\n  let key = 0;\n\n  for (const textItem of text) {\n    key++;\n\n    if (textItem.length === 1) {\n      children.push(textItem);\n      continue;\n    }\n\n    children.push(applyTags(textItem[1], textItem[0], noPTag, key));\n  }\n\n  const includesCJKV = Number((_text$toString$match = text.toString().match(CJKTester)) === null || _text$toString$match === void 0 ? void 0 : _text$toString$match.length) > 5;\n  const props = {\n    key: mainKey\n  };\n\n  if (includesCJKV && !noPTag) {\n    props.className = 'zh-han';\n  }\n\n  return React.createElement(noPTag ? React.Fragment : components.p, props, ...children, noPTag);\n}","map":null,"metadata":{},"sourceType":"module"}