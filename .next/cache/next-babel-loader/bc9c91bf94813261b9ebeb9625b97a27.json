{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/jamesbedford/Documents/GitHub/jamees-site/src/pages/blog/index.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Header from '../../components/header';\nimport { getBlogLink, getDateStr } from '../../lib/blog-helpers';\nexport var __N_SSG = true;\nexport default (function (_ref) {\n  var _ref$posts = _ref.posts,\n      posts = _ref$posts === void 0 ? [] : _ref$posts;\n  return __jsx(\"article\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Thoughts\"), __jsx(Header, {\n    title: \"Thoughts\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"post-list\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, posts.map(function (post) {\n    return __jsx(\"p\", {\n      className: \"post-item\",\n      key: post.Slug,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, __jsx(Link, {\n      href: \"/blog/[slug]\",\n      as: getBlogLink(post.Slug),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, post.Page)), __jsx(\"time\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, getDateStr(post.Date)));\n  })));\n});","map":{"version":3,"sources":["/Users/jamesbedford/Documents/GitHub/jamees-site/src/pages/blog/index.tsx"],"names":["Link","Header","getBlogLink","getDateStr","posts","map","post","Slug","Page","Date"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,SAASC,WAAT,EAAsBC,UAAtB,QAAqD,wBAArD;;AAqCA,gBAAe,gBAAoB;AAAA,wBAAjBC,KAAiB;AAAA,MAAjBA,KAAiB,2BAAT,EAAS;AACjC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AACjB,WACE;AAAG,MAAA,SAAS,EAAC,WAAb;AAAyB,MAAA,GAAG,EAAEA,IAAI,CAACC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,cAAX;AAA0B,MAAA,EAAE,EAAEL,WAAW,CAACI,IAAI,CAACC,IAAN,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,IAAI,CAACE,IAAT,CADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOL,UAAU,CAACG,IAAI,CAACG,IAAN,CAAjB,CAJF,CADF;AAQD,GATA,CADH,CAHF,CADF;AAkBD,CAnBD","sourcesContent":["import Link from 'next/link'\nimport Header from '../../components/header'\n\nimport { getBlogLink, getDateStr, postIsReady } from '../../lib/blog-helpers'\nimport { textBlock } from '../../lib/notion/renderers'\nimport getNotionUsers from '../../lib/notion/getNotionUsers'\nimport getBlogIndex from '../../lib/notion/getBlogIndex'\n\nexport async function getStaticProps() {\n  const postsTable = await getBlogIndex()\n\n  const authorsToGet: Set<string> = new Set()\n  const posts: any[] = Object.keys(postsTable)\n    .map(slug => {\n      const post = postsTable[slug]\n      // remove draft posts in production\n      if (!postIsReady(post)) {\n        return null\n      }\n      post.Authors = post.Authors || []\n      for (const author of post.Authors) {\n        authorsToGet.add(author)\n      }\n      return post\n    })\n    .filter(Boolean)\n\n  const { users } = await getNotionUsers([...authorsToGet])\n\n  posts.map(post => {\n    post.Authors = post.Authors.map(id => users[id].full_name)\n  })\n\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n\nexport default ({ posts = [] }) => {\n  return (\n    <article>\n      <h1>Thoughts</h1>\n      <Header title=\"Thoughts\" />\n      <div className=\"post-list\">\n        {posts.map(post => {\n          return (\n            <p className=\"post-item\" key={post.Slug}>\n              <Link href=\"/blog/[slug]\" as={getBlogLink(post.Slug)}>\n                <a>{post.Page}</a>\n              </Link>\n              <time>{getDateStr(post.Date)}</time>\n            </p>\n          )\n        })}\n      </div>\n    </article>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}