{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport getNotionAssetUrls from '../../lib/notion/getNotionAssetUrls';\nimport { setHeaders, handleData, handleError } from '../../lib/notion/utils';\nexport default async function notionApi(req, res) {\n  if (setHeaders(req, res)) return;\n\n  try {\n    const {\n      assetUrl,\n      blockId\n    } = req.query;\n\n    if (!assetUrl || !blockId) {\n      handleData(res, {\n        status: 'error',\n        message: 'asset url or blockId missing'\n      });\n    } else {\n      // we need to re-encode it since it's decoded when added to req.query\n      const _ref = await getNotionAssetUrls(res, assetUrl, blockId),\n            {\n        signedUrls = []\n      } = _ref,\n            urlsResponse = _objectWithoutProperties(_ref, [\"signedUrls\"]);\n\n      if (signedUrls.length === 0) {\n        console.error('Failed to get signedUrls', urlsResponse);\n        return handleData(res, {\n          status: 'error',\n          message: 'Failed to get asset URL'\n        });\n      }\n\n      res.status(307);\n      res.setHeader('Location', signedUrls.pop());\n      res.end();\n    }\n  } catch (error) {\n    handleError(res, error);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}