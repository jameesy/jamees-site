{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ReactJSXParser from '@zeit/react-jsx-parser';\nimport Heading from './heading';\nimport components from './dynamic';\nimport { textBlock } from '../lib/notion/renderers';\nvar listTypes = new Set(['bulleted_list', 'numbered_list']);\nexport default function Content(_ref) {\n  var blocks = _ref.blocks;\n  var listTagName = null;\n  var listLastId = null;\n  var listChildren = [];\n  return __jsx(\"div\", {\n    className: \"content\"\n  }, blocks.map(function (block, blockIdx) {\n    var value = block.value;\n    var type = value.type,\n        properties = value.properties,\n        id = value.id;\n    var isLast = blockIdx === blocks.length - 1;\n    var isList = listTypes.has(type);\n    var toRender = [];\n\n    if (isList) {\n      listTagName = components[type === 'bulleted_list' ? 'ul' : 'ol'];\n      listLastId = \"list\".concat(id);\n      listChildren.push(React.createElement(components.li || 'li', {\n        key: id\n      }, textBlock(properties.title, true, id)));\n    }\n\n    if (listTagName && (isLast || !isList)) {\n      toRender.push(React.createElement.apply(React, [listTagName, {\n        key: listLastId\n      }].concat(_toConsumableArray(listChildren))));\n      listChildren = [];\n      listLastId = null;\n      listTagName = null;\n    }\n\n    var renderHeading = function renderHeading(Type) {\n      toRender.push(__jsx(Heading, {\n        key: id\n      }, __jsx(Type, {\n        key: id\n      }, textBlock(properties.title, true, id))));\n    };\n\n    switch (type) {\n      case 'page':\n      case 'divider':\n        toRender.push(__jsx(\"hr\", null));\n        break;\n\n      case 'text':\n        if (properties) {\n          toRender.push(textBlock(properties.title, false, id));\n        }\n\n        break;\n\n      case 'image':\n      case 'video':\n        {\n          var _value$format = value.format,\n              format = _value$format === void 0 ? {} : _value$format,\n              caption = value.properties.caption;\n          var isImage = type === 'image';\n          var Comp = isImage ? 'img' : 'video';\n          toRender.push(__jsx(\"div\", {\n            className: \"media-container\",\n            key: id,\n            style: {\n              paddingBottom: format.block_aspect_ratio * 100 + '%'\n            }\n          }, __jsx(Comp, {\n            src: \"/api/asset?assetUrl=\".concat(encodeURIComponent(format.display_source), \"&blockId=\").concat(id),\n            controls: !isImage,\n            alt: caption ? caption.join('') : undefined,\n            loop: !isImage,\n            muted: !isImage,\n            autoPlay: !isImage\n          })));\n          break;\n        }\n\n      case 'header':\n        renderHeading('h1');\n        break;\n\n      case 'sub_header':\n        renderHeading('h2');\n        break;\n\n      case 'sub_sub_header':\n        renderHeading('h3');\n        break;\n\n      case 'code':\n        {\n          if (properties.title) {\n            var content = properties.title[0][0];\n            var language = properties.language[0][0];\n\n            if (language === 'LiveScript') {\n              // this requires the DOM for now\n              toRender.push(__jsx(ReactJSXParser, {\n                key: id,\n                jsx: content,\n                components: components,\n                componentsOnly: false,\n                renderInpost: false,\n                allowUnknownElements: true,\n                blacklistedTags: ['script', 'style']\n              }));\n            } else {\n              toRender.push(__jsx(components.Code, {\n                key: id,\n                language: language || ''\n              }, content));\n            }\n          }\n\n          break;\n        }\n\n      case 'quote':\n        if (properties.title) {\n          toRender.push(React.createElement(components.blockquote, {\n            key: id\n          }, textBlock(properties.title, false, id)));\n        }\n\n        break;\n\n      default:\n        if (false && !listTypes.has(type)) {\n          console.log('unknown type', type);\n        }\n\n        break;\n    }\n\n    return toRender;\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}