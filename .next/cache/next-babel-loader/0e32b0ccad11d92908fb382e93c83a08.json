{"ast":null,"code":"import { resolve } from 'path';\nimport { writeFile } from './fs-helpers';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { textBlock } from './notion/renderers';\nimport getBlogIndex from './notion/getBlogIndex';\nimport getNotionUsers from './notion/getNotionUsers';\nimport { postIsReady, getBlogLink } from './blog-helpers'; // must use weird syntax to bypass auto replacing of NODE_ENV\n\nprocess.env['NODE' + '_ENV'] = 'production'; // constants\n\nconst NOW = new Date().toJSON();\n\nfunction mapToAuthor(author) {\n  return `<author><name>${author.full_name}</name></author>`;\n}\n\nfunction decode(string) {\n  return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n}\n\nfunction mapToEntry(post) {\n  return `\n    <entry>\n      <id>${post.link}</id>\n      <title>${decode(post.title)}</title>\n      <link href=\"${post.link}\"/>\n      <updated>${new Date(post.date).toJSON()}</updated>\n      <content type=\"xhtml\">\n        <div xmlns=\"http://www.w3.org/1999/xhtml\">\n          ${renderToStaticMarkup(post.preview ? (post.preview || []).map((block, idx) => textBlock(block, false, post.title + idx)) : post.content)}\n          <p class=\"more\">\n            <a href=\"${post.link}\">Read more</a>\n          </p>\n        </div>\n      </content>\n      ${(post.authors || []).map(mapToAuthor).join('\\n      ')}\n    </entry>`;\n}\n\nfunction concat(total, item) {\n  return total + item;\n}\n\nfunction createRSS(blogPosts = []) {\n  const postsString = blogPosts.map(mapToEntry).reduce(concat, '');\n  return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <feed xmlns=\"http://www.w3.org/2005/Atom\">\n    <title>My Blog</title>\n    <subtitle>Blog</subtitle>\n    <link href=\"/atom\" rel=\"self\" type=\"application/rss+xml\"/>\n    <link href=\"/\" />\n    <updated>${NOW}</updated>\n    <id>My Notion Blog</id>${postsString}\n  </feed>`;\n}\n\nasync function main() {\n  const postsTable = await getBlogIndex(true);\n  const neededAuthors = new Set();\n  const blogPosts = Object.keys(postsTable).map(slug => {\n    const post = postsTable[slug];\n    if (!postIsReady(post)) return;\n    post.authors = post.Authors || [];\n\n    for (const author of post.authors) {\n      neededAuthors.add(author);\n    }\n\n    return post;\n  }).filter(Boolean);\n  const {\n    users\n  } = await getNotionUsers([...neededAuthors]);\n  blogPosts.forEach(post => {\n    post.authors = post.authors.map(id => users[id]);\n    post.link = getBlogLink(post.Slug);\n    post.title = post.Page;\n    post.date = post.Date;\n  });\n  const outputPath = './public/atom';\n  await writeFile(resolve(outputPath), createRSS(blogPosts));\n  console.log(`Atom feed file generated at \\`${outputPath}\\``);\n}\n\nmain().catch(error => console.error(error));","map":null,"metadata":{},"sourceType":"module"}