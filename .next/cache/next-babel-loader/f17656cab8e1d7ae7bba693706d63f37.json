{"ast":null,"code":"import { values } from './rpc';\nimport queryCollection from './queryCollection';\nimport Slugger from 'github-slugger';\nexport default async function loadTable(collectionBlock, isPosts = false) {\n  const slugger = new Slugger();\n  const {\n    value\n  } = collectionBlock;\n  let table = {};\n  const col = await queryCollection({\n    collectionId: value.collection_id,\n    collectionViewId: value.view_ids[0]\n  });\n  const entries = values(col.recordMap.block).filter(block => {\n    return block.value && block.value.parent_id === value.collection_id;\n  });\n  const colId = Object.keys(col.recordMap.collection)[0];\n  const schema = col.recordMap.collection[colId].value.schema;\n  const schemaKeys = Object.keys(schema);\n\n  for (const entry of entries) {\n    const props = entry.value && entry.value.properties;\n    const row = {};\n    if (!props) continue;\n\n    if (entry.value.content) {\n      row.id = entry.value.id;\n    }\n\n    schemaKeys.forEach(key => {\n      // might be undefined\n      let val = props[key] && props[key][0][0]; // authors and blocks are centralized\n\n      if (val && props[key][0][1]) {\n        const type = props[key][0][1][0];\n\n        switch (type[0]) {\n          case 'a':\n            // link\n            val = type[1];\n            break;\n\n          case 'u':\n            // user\n            val = props[key].filter(arr => arr.length > 1).map(arr => arr[1][0][1]);\n            break;\n\n          case 'p':\n            // page (block)\n            const page = col.recordMap.block[type[1]];\n            row.id = page.value.id;\n            val = page.value.properties.title[0][0];\n            break;\n\n          case 'd':\n            // date\n            // start_date: 2019-06-18\n            // start_time: 07:00\n            // time_zone: Europe/Berlin, America/Los_Angeles\n            if (!type[1].start_date) {\n              break;\n            } // initial with provided date\n\n\n            const providedDate = new Date(type[1].start_date + ' ' + (type[1].start_time || '')).getTime(); // calculate offset from provided time zone\n\n            const timezoneOffset = new Date(new Date().toLocaleString('en-US', {\n              timeZone: type[1].time_zone\n            })).getTime() - new Date().getTime(); // initialize subtracting time zone offset\n\n            val = new Date(providedDate - timezoneOffset).getTime();\n            break;\n\n          default:\n            console.error('unknown type', type[0], type);\n            break;\n        }\n      }\n\n      if (typeof val === 'string') {\n        val = val.trim();\n      }\n\n      row[schema[key].name] = val || null;\n    }); // auto-generate slug from title\n\n    row.Slug = row.Slug || slugger.slug(row.Page || '');\n    const key = row.Slug;\n    if (isPosts && !key) continue;\n\n    if (key) {\n      table[key] = row;\n    } else {\n      if (!Array.isArray(table)) table = [];\n      table.push(row);\n    }\n  }\n\n  return table;\n}","map":null,"metadata":{},"sourceType":"module"}