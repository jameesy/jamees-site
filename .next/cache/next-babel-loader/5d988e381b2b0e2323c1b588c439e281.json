{"ast":null,"code":"import React from 'react';\nimport components from '../../components/dynamic';\n\nfunction applyTags(tags = [], children, noPTag = false, key) {\n  let child = children;\n\n  for (const tag of tags) {\n    const props = {\n      key\n    };\n    let tagName = tag[0];\n    if (noPTag && tagName === 'p') tagName = React.Fragment;\n    if (tagName === 'c') tagName = 'code';\n\n    if (tagName === 'a') {\n      props.href = tag[1];\n    }\n\n    child = React.createElement(components[tagName] || tagName, props, child);\n  }\n\n  return child;\n}\n\nconst CJKTester = /[\\u3000-\\u303f\\u3040-\\u309f\\u30a0-\\u30ff\\uff00-\\uff9f\\u4e00-\\u9faf\\u3400-\\u4dbf]/g;\nexport function textBlock(text = [], noPTag = false, mainKey) {\n  var _text$toString$match;\n\n  const children = [];\n  let key = 0;\n\n  for (const textItem of text) {\n    key++;\n\n    if (textItem.length === 1) {\n      children.push(textItem);\n      continue;\n    }\n\n    children.push(applyTags(textItem[1], textItem[0], noPTag, key));\n  }\n\n  const includesCJKV = Number((_text$toString$match = text.toString().match(CJKTester)) === null || _text$toString$match === void 0 ? void 0 : _text$toString$match.length) > 5;\n  const props = {\n    key: mainKey\n  };\n\n  if (includesCJKV && !noPTag) {\n    props.className = 'zh-han';\n  }\n\n  return React.createElement(noPTag ? React.Fragment : components.p, props, ...children, noPTag);\n}","map":{"version":3,"sources":["/Users/jamesbedford/Documents/GitHub/jamees-site/src/lib/notion/renderers.ts"],"names":["React","components","applyTags","tags","children","noPTag","key","child","tag","props","tagName","Fragment","href","createElement","CJKTester","textBlock","text","mainKey","textItem","length","push","includesCJKV","Number","toString","match","className","p"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,SAASC,SAAT,CAAmBC,IAAI,GAAG,EAA1B,EAA8BC,QAA9B,EAAwCC,MAAM,GAAG,KAAjD,EAAwDC,GAAxD,EAA6D;AAC3D,MAAIC,KAAK,GAAGH,QAAZ;;AAEA,OAAK,MAAMI,GAAX,IAAkBL,IAAlB,EAAwB;AACtB,UAAMM,KAA6B,GAAG;AAAEH,MAAAA;AAAF,KAAtC;AACA,QAAII,OAAO,GAAGF,GAAG,CAAC,CAAD,CAAjB;AAEA,QAAIH,MAAM,IAAIK,OAAO,KAAK,GAA1B,EAA+BA,OAAO,GAAGV,KAAK,CAACW,QAAhB;AAC/B,QAAID,OAAO,KAAK,GAAhB,EAAqBA,OAAO,GAAG,MAAV;;AAErB,QAAIA,OAAO,KAAK,GAAhB,EAAqB;AACnBD,MAAAA,KAAK,CAACG,IAAN,GAAaJ,GAAG,CAAC,CAAD,CAAhB;AACD;;AAEDD,IAAAA,KAAK,GAAGP,KAAK,CAACa,aAAN,CAAoBZ,UAAU,CAACS,OAAD,CAAV,IAAuBA,OAA3C,EAAoDD,KAApD,EAA2DF,KAA3D,CAAR;AACD;;AACD,SAAOA,KAAP;AACD;;AAED,MAAMO,SAAS,GAAG,mFAAlB;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAI,GAAG,EAA1B,EAA8BX,MAAM,GAAG,KAAvC,EAA8CY,OAA9C,EAAuD;AAAA;;AAC5D,QAAMb,QAAQ,GAAG,EAAjB;AACA,MAAIE,GAAG,GAAG,CAAV;;AAEA,OAAK,MAAMY,QAAX,IAAuBF,IAAvB,EAA6B;AAC3BV,IAAAA,GAAG;;AACH,QAAIY,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzBf,MAAAA,QAAQ,CAACgB,IAAT,CAAcF,QAAd;AACA;AACD;;AACDd,IAAAA,QAAQ,CAACgB,IAAT,CAAclB,SAAS,CAACgB,QAAQ,CAAC,CAAD,CAAT,EAAcA,QAAQ,CAAC,CAAD,CAAtB,EAA2Bb,MAA3B,EAAmCC,GAAnC,CAAvB;AACD;;AAED,QAAMe,YAAY,GAAGC,MAAM,yBAACN,IAAI,CAACO,QAAL,GAAgBC,KAAhB,CAAsBV,SAAtB,CAAD,yDAAC,qBAAkCK,MAAnC,CAAN,GAAmD,CAAxE;AACA,QAAMV,KAAU,GAAG;AAAEH,IAAAA,GAAG,EAAEW;AAAP,GAAnB;;AACA,MAAII,YAAY,IAAI,CAAChB,MAArB,EAA6B;AAC3BI,IAAAA,KAAK,CAACgB,SAAN,GAAkB,QAAlB;AACD;;AAED,SAAOzB,KAAK,CAACa,aAAN,CACLR,MAAM,GAAGL,KAAK,CAACW,QAAT,GAAoBV,UAAU,CAACyB,CADhC,EAELjB,KAFK,EAGL,GAAGL,QAHE,EAILC,MAJK,CAAP;AAMD","sourcesContent":["import React from 'react'\nimport components from '../../components/dynamic'\n\nfunction applyTags(tags = [], children, noPTag = false, key) {\n  let child = children\n\n  for (const tag of tags) {\n    const props: { [key: string]: any } = { key }\n    let tagName = tag[0]\n\n    if (noPTag && tagName === 'p') tagName = React.Fragment\n    if (tagName === 'c') tagName = 'code'\n\n    if (tagName === 'a') {\n      props.href = tag[1]\n    }\n\n    child = React.createElement(components[tagName] || tagName, props, child)\n  }\n  return child\n}\n\nconst CJKTester = /[\\u3000-\\u303f\\u3040-\\u309f\\u30a0-\\u30ff\\uff00-\\uff9f\\u4e00-\\u9faf\\u3400-\\u4dbf]/g\n\nexport function textBlock(text = [], noPTag = false, mainKey) {\n  const children = []\n  let key = 0\n\n  for (const textItem of text) {\n    key++\n    if (textItem.length === 1) {\n      children.push(textItem)\n      continue\n    }\n    children.push(applyTags(textItem[1], textItem[0], noPTag, key))\n  }\n\n  const includesCJKV = Number(text.toString().match(CJKTester)?.length) > 5\n  const props: any = { key: mainKey }\n  if (includesCJKV && !noPTag) {\n    props.className = 'zh-han'\n  }\n\n  return React.createElement(\n    noPTag ? React.Fragment : components.p,\n    props,\n    ...children,\n    noPTag\n  )\n}\n"]},"metadata":{},"sourceType":"module"}